openapi: 3.0.3
info:
  title: School Management API
  version: 1.0.0
  description: API for managing a school
servers:
  - url: https://locahost:4000/api
    description: localhost
  - url: http://46.101.220.126:4000/api
    description: production

components:
  parameters:
    token:
      name: token
      in: header
      required: true
      schema:
        type: string
        example: 'jwt-token-sample'
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 677f058c326f46dd341d9dc5
        username:
          type: string
          example: solo
        email:
          type: string
          example: test2@gmail.com
        role:
          type: string
          example: SuperAdmin
        isSuperAdmin:
          type: boolean
          example: false
        deleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2025-01-08T23:09:00.023Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-01-09T00:28:28.491Z
        __v:
          type: integer
          example: 0
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: solo
        password:
          type: string
          example: love&light!
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyS2V5Ijoic29sbyIsInVzZXJJZCI6IjY3N2YwNThjMzI2ZjQ2ZGQzNDFkOWRjNSIsImlhdCI6MTczNjM4MjU0MywiZXhwIjoxODMxMDU1MzQzfQ.abrLTB3cGvP6TgFzU5aLNn2mtEsh4Oy4sl-kr4HPBKc
        errors:
          type: array
          items:
            type: string
          example: []
        message:
          type: string
          example: ''
    ErrorResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        data:
          type: object
          example: {}
        errors:
          type: object
          additionalProperties:
            type: string
          example:
            field1: 'field1 is required'
            field2: 'field2 is required'
        message:
          type: string
          example: ''
    MessageResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        data:
          type: object
          example: {}
        errors:
          type: object
          additionalProperties:
            type: string
        message:
          type: string
          example: 'Something happened'
    Student:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the student
          example: "677ffc43b3083e2ff276f230"
        authProfile:
          type: string
          description: Reference to the user's authentication profile
          example: "677f058c326f46dd341d9dc5"
        firstName:
          type: string
          description: First name of the student
          example: "first student"
        lastName:
          type: string
          description: Last name of the student
          example: "last student"
        dateOfBirth:
          type: string
          format: date-time
          description: Date of birth of the student
          example: "1993-09-06T00:00:00.000Z"
        isActive:
          type: boolean
          description: Indicates whether the student is currently active
          example: true
        classroom:
          type: string
          description: Reference to the classroom the student belongs to
          example: "677ff5e52f28a85c389f9268"
        createdBy:
          type: string
          description: User who created the student's profile
          example: "677f058c326f46dd341d9dc5"
        enrollmentDate:
          type: string
          format: date-time
          description: The date the student was enrolled
          example: "2025-01-09T16:41:39.726Z"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the student's record was created
          example: "2025-01-09T16:41:39.728Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the student's record was last updated
          example: "2025-01-09T16:47:03.226Z"
    School:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the school
          example: "677fdfdcf47aee8ee704b5a6"
        name:
          type: string
          description: Name of the school
          example: "North Bridge"
        address:
          type: string
          description: Address of the school
          example: "Kampala, Uganda"
        email:
          type: string
          format: email
          description: Contact email for the school
          example: "admin@northbridge.ac.ug"
        isActive:
          type: boolean
          description: Indicates whether the school is currently active
          example: true
        createdBy:
          type: string
          description: User who created the school's profile
          example: "677f058c326f46dd341d9dc5"
        classrooms:
          type: array
          description: List of classrooms associated with the school
          items:
            type: string
          example: []
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the school's record was created
          example: "2025-01-09T14:40:28.476Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the school's record was last updated
          example: "2025-01-09T14:41:19.481Z"
    Classroom:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the classroom
          example: "677ff5b82f28a85c389f9264"
        name:
          type: string
          description: Name of the classroom
          example: "Primary One1"
        capacity:
          type: integer
          description: The maximum number of students the classroom can hold
          example: 200
        school:
          type: string
          description: Reference to the school the classroom belongs to
          example: "677fdfdcf47aee8ee704b5a6"
        createdBy:
          type: string
          description: User who created the classroom
          example: "677f058c326f46dd341d9dc5"
        students:
          type: array
          description: List of students associated with the classroom
          items:
            type: string
          example: []
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the classroom record was created
          example: "2025-01-09T16:13:44.146Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the classroom record was last updated
          example: "2025-01-09T16:13:44.146Z"
paths:
  /auth/login:
    post:
      summary: Login a user
      description: Authenticate a user with their username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/admin/users/{id}:
    patch:
      summary: Update a user by ID
      description: Updates an existing user's details. Partial updates are supported.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            example: 677f058c326f46dd341d9dc5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test_updated
                password:
                  type: string
                  example: updated&secure!
                role:
                  type: string
                  enum:
                    - SuperAdmin
                    - SchoolAdmin
                    - Student
                  example: SchoolAdmin
                email:
                  type: string
                  format: email
                  example: updatedemail@gmail.com
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ''
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  data:
                    type: object
                    example: {}
                  errors:
                    type: array
                    items:
                      type: string
                    example: ['Invalid email format']
                  message:
                    type: string
                    example: 'Validation failed'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  data:
                    type: object
                    example: {}
                  errors:
                    type: array
                    items:
                      type: string
                    example: ['User not found']
                  message:
                    type: string
                    example: ''
    get:
      summary: Get a user by ID
      description: Retrieve a specific user by their unique ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            example: 677f058c326f46dd341d9dc5
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ''
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    delete:
      summary: Delete a user by ID
      description: Delete a specific user by their unique ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            example: 677f058c326f46dd341d9dc5
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/admin/users:
    post:
      summary: Create a new user
      description: Creates a new user with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test
                password:
                  type: string
                  example: test&test!
                role:
                  type: string
                  enum:
                    - SuperAdmin
                    - SchoolAdmin
                    - Student
                  example: SchoolAdmin
                email:
                  type: string
                  format: email
                  example: test222@gmail.com
              required:
                - username
                - password
                - role
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ''
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  data:
                    type: object
                    example: {}
                  errors:
                    type: array
                    items:
                      type: string
                    example: ['Email already exists', 'Invalid role']
                  message:
                    type: string
                    example: 'Validation failed'
  /api/admin/schools:
    post:
      summary: Create a new school
      description: Add a new school to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the school
                  example: "North Bridge"
                address:
                  type: string
                  description: Address of the school
                  example: "Kampala"
                email:
                  type: string
                  format: email
                  description: Contact email for the school
                  example: "admin@northbridge.ac.ug"
              required:
                - name
                - address
                - email
      responses:
        '201':
          description: School created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      school:
                        $ref: '#/components/schemas/School'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ""
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Name is required", "Email is invalid"]
                  message:
                    type: string
                    example: "Validation failed"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
    get:
      summary: Get all schools
      description: Retrieve a list of all schools.
      responses:
        '200':
          description: List of schools retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      schools:
                        type: array
                        description: List of schools
                        items:
                          $ref: '#/components/schemas/School'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ""
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
  /api/admin/schools/{schoolId}:
    patch:
      summary: Update a school by ID
      description: Update an existing school's details.
      parameters:
        - name: schoolId
          in: path
          required: true
          description: The unique identifier of the school to update
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the school
                  example: "Updated School Name"
                address:
                  type: string
                  description: Address of the school
                  example: "Updated Address"
                email:
                  type: string
                  format: email
                  description: Contact email for the school
                  example: "updated@school.com"
                isActive:
                  type: boolean
                  description: Indicates whether the school is active
                  example: true
              
              description: At least one field must be provided for an update.
      responses:
        '200':
          description: School updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      school:
                        $ref: '#/components/schemas/School'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: "School updated successfully"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Invalid email format", "Name must not be empty"]
                  message:
                    type: string
                    example: "Validation failed"
        '404':
          description: School not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["School not found"]
                  message:
                    type: string
                    example: "School with the given ID does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
    delete:
      summary: Delete a school by ID
      description: Remove a school from the system using its unique identifier.
      parameters:
        - name: schoolId
          in: path
          required: true
          description: The unique identifier of the school to delete
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
      responses:
        '200':
          description: School deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "School deleted successfully"
        '404':
          description: School not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["School not found"]
                  message:
                    type: string
                    example: "School with the given ID does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
  /api/schools/{schoolId}/classrooms:
    post:
      summary: Create a new classroom
      description: Add a new classroom to the system.
      parameters:
        - name: schoolId
          in: path
          required: true
          description: The unique identifier of the school
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the classroom
                  example: "Primary one"
                capacity:
                  type: number
                  description: Number of accepted students
                  example: 200
              required:
                - name
                - capacity
      responses:
        '201':
          description: Classroom created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      school:
                        $ref: '#/components/schemas/Classroom'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ""
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: {"field1": "Name is required", "field2": "is invalid"}
                  message:
                    type: string
                    example: "Validation failed"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
    get:
      summary: Get all classrooms
      description: Retrieve a list of all classrooms.
      parameters:
        - name: schoolId
          in: path
          required: true
          description: The unique identifier of the school
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
      responses:
        '200':
          description: List of classrooms that belong to a school retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      schools:
                        type: array
                        description: List of classrooms
                        items:
                          $ref: '#/components/schemas/Classroom'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: ""
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
  /api/schools/{schoolId}/classrooms/{classroomId}:
    patch:
      summary: Update a classroom by ID
      description: Update an existing classroom's details.
      parameters:
        - name: schoolId
          in: path
          required: true
          description: The unique identifier of the school
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
        - name: classroomId
          in: path
          required: true
          description: The unique identifier of the classroom to update
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the classroom
                  example: "Updated School Name"
                capacity:
                  type: string
                  description: capacity of the classroom
                  example: "Updated capacity"
              
              description: At least one field must be provided for an update.
      responses:
        '200':
          description: Classroom updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      school:
                        $ref: '#/components/schemas/Classroom'
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
                  message:
                    type: string
                    example: "Classroom updated successfully"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: [{"field":"Invalid email format"}]
                  message:
                    type: string
                    example: "Validation failed"
        '404':
          description: Classroom not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["School not found"]
                  message:
                    type: string
                    example: "School with the given ID does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"
    delete:
      summary: Delete a Classroom by ID
      description: Remove a classroom from the system using its unique identifier.
      parameters:
        - name: schoolId
          in: path
          required: true
          description: The unique identifier of the school
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
        - name: classroomId
          in: path
          required: true
          description: The unique identifier of the classroom to update
          schema:
            type: string
            example: "677fdfdcf47aee8ee704b5a6"
      responses:
        '200':
          description: Classroom deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Classroom deleted successfully"
        '404':
          description: Classroom not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["School not found"]
                  message:
                    type: string
                    example: "School with the given ID does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Internal server error"]
                  message:
                    type: string
                    example: "An unexpected error occurred"